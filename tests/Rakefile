require 'rspec/core/rake_task'
RSpec::Core::RakeTask.new(:spec)

# Matches lines like: #define KEY "value" or #define KEY ("value")
PREPROCESSOR_STRING_DEFINITION_REGEX = /\A\s*?#define\s+(.+?)\b\W+(".+?")/

# Matches lines like: #define KEY value or #define KEY (value)
PREPROCESSOR_NUMBER_DEFINITION_REGEX = /\A\s*?#define\s+(.+?)\b\W+([\w.]+)/

# Matches lines like: constexpr const char* KEY = "value";
CONSTEXPR_DEFINITION_REGEX = /constexpr const char\s*?\*\s*(.+?)\s*=\s*(.+?)\s*;/

def get_definitions(file_name, regex)
  File.readlines(File.expand_path(File.join('../../C++/include', file_name), __FILE__)).map { |line|
    m = line.match(regex)
    if m && (key = m[1]) && (value = m[2])
      "  #{key} = #{value}".gsub('"', "'")
    else
      nil
    end
  }.compact
end

desc 'Generate constant definitions file using definitions from C++ header files'
task :import_definitions do
  constexpr_header_files = %w(mock_hardware/Shared.h)
  preprocessor_string_header_files = %w(Shared.h Settings.h)
  preprocessor_number_header_files = %w(MotorController.h)
  definitions_file = File.expand_path('../spec/support/definitions.rb', __FILE__)
  buf = ['# This file is generated by the import_definitions rake task', '# DO NOT EDIT', 'module Tests']
  buf.concat(constexpr_header_files.map { |f| get_definitions(f, CONSTEXPR_DEFINITION_REGEX) })
  buf.concat(preprocessor_string_header_files.map { |f| get_definitions(f, PREPROCESSOR_STRING_DEFINITION_REGEX) })
  buf.concat(preprocessor_number_header_files.map { |f| get_definitions(f, PREPROCESSOR_NUMBER_DEFINITION_REGEX) })
  buf << 'end'
  File.write(definitions_file, buf.join("\n") << "\n")
  puts 'Successfully imported constant definitions'
end